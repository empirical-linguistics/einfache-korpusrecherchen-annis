[
["index.html", "Einfache Korpusrecherchen in ANNIS: Ein Schnelleinstieg 1 Einführung", " Einfache Korpusrecherchen in ANNIS: Ein Schnelleinstieg Stefan Hartmann 2020-06-29 1 Einführung In diesem kurzen Tutorial zeige ich, wie man in Korpora, die über die Plattform ANNIS verfügbar sind, einfache Korpusrecherchen durchführen kann und wie man die Ergebnisse anschließend in Form einer KWIC-Konkordanz in ein Tabellenkalkulationsprogramm exportieren kann. Dabei liegt der Fokus vor allem auf dem letztgenannten Aspekt, also den Herausforderungen, die der Export mit sich bringt. Für die Suche in ANNIS gibt es nämlich schon eine ganze Reihe hervorragender Tutorials zusätzlich zur sehr ausführlichen und hilfreichen Dokumentation. Beispielsweise gibt es hier einige Videotutorials und hier einen Einstieg am Beispiel des RIDGES-Korpus. ANNIS ist ein Such- und Visualisierungstool, das zum einen als Open-Source-Software herunterladbar und auf dem eigenen Rechner verwendbar ist, zum anderen auch über verschiedene öffentliche Instanzen online verwendet werden kann. In diesem Tutorial beschäftigen wir uns nur mit diesem Szenario, also der Nutzung von Online-Schnittstellen. Da prinzipiell jede/r, der oder die einen Server zur Verfügung hat, eine eigene öffentliche ANNIS-Instanz starten kann, gibt es mehrere Instanzen, über die unterschiedliche Korpora verfügbar sind. Nennenswerte ANNIS-Instanzen sind: HU Berlin: Hier finden sich u.a. das Referenzkorpus Altdeutsch (Deutsch Diachron Digital, kurz DDD), das Lernerkorpus FALKO oder auch das RIDGES-Korpus, mit dem wir im folgenden Beispiel arbeiten werden: https://korpling.german.hu-berlin.de/annis3/ Georgetown University: Über diese Instanz ist z.B. das Georgetown University Multilayer Corpus (GUM) verfügbar, https://corpling.uis.georgetown.edu/annis-corpora/ Über eine Bonner ANNIS-Instanz ist das für die germanistische Sprachgeschichtsforschung sehr wichtige Bonner Frühneuhochdeutschkorpus verfügbar https://korpora.zim.uni-due.de/FnhdC/ Das Referenzkorpus Mittelhochdeutsch ist auf einer Bochumer ANNIS-Instanz zu finden: https://www.linguistics.rub.de/rem/ Diese Liste ließe sich noch fortsetzen. Wichtig zu wissen ist, dass die grundlegenden Methoden, die wir im Folgenden kennenlernen werden, sich im Grunde auf alle über ANNIS verfügbaren Korpora übertragen lassen. Zu den deutschsprachigen Korpora, die über öffentliche ANNIS-Instanzen verfügbar sind, gehören unter anderem das Referenzkorpus Altdeutsch das Referenzkorpus Mittelhochdeutsch das Bonner Frühneuhochdeutschkorpus das Referenzkorpus Frühneuhochdeutsch das RIDGES-Korpus (“Registers in Diachronic German Science”) das Kiezdeutsch-Korpus (Registrierung erforderlich) In diesem Tutorial arbeiten wir mit dem RIDGES-Korpus, das, wie viele andere Korpora auch, über https://korpling.german.hu-berlin.de/annis3/ verfügbar ist. Für alle, die lieber schauen statt lesen, gibt eine auch eine Video-Version des Tutorials (die minimal anders ist und außerdem mein allererstes Video, deshalb teilweise etwas holprig). Um es zu sehen, klappen Sie einfach durch Klick auf den Pfeil den entsprechenden Abschnitt aus: klick mich Dieses Tutorial wurde mit Hilfe von Bookdown für R geschrieben und publiziert. Es ist lizenziert unter CC-BY-SA und kann gerne mit Quellenangabe weitergegeben und adaptiert werden. "],
["annis-interface-und-suchabfragesprache.html", "2 ANNIS: Interface und Suchabfragesprache 2.1 ANNIS-Interface 2.2 Suchabfragesprache 2.3 Beispiel: Diminutive in RIDGES", " 2 ANNIS: Interface und Suchabfragesprache In diesem Kapitel werfen wir zunächst einen genaueren Blick auf das ANNIS-Interface und lernen dann anhand eines Beispiels Grundelemente der Suchabfragesprache kennen. Dabei kann dieses Tutorial allerdings die Auseinandersetzung mit der Dokumentation von ANNIS und seiner Suchabfragesprache nicht ersetzen. 2.1 ANNIS-Interface Das ANNIS-Interface besteht aus drei Teilen: Links oben sehen wir die Suchmaske, darunter die Korpusauswahl, rechts sehen wir zunächst eine Seite mit Beispielanfragen und Zugang zur Hilfe, die eine sehr umfangreiche englischsprachige Dokumentation zu ANNIS und seinen Funktionen bietet. Fig. 2.1: ANNIS-Interface 2.2 Suchabfragesprache ANNIS arbeitet mit der ANNIS Query Language, die hier dokumentiert ist. Da ANNIS v.a. für syntaktisch annotierte Korpora entwickelt wurde (ANNIS steht für “Annotation of Information Structure”), entfaltet die Suchabfragesprache ihr volles Potential in sog. Baumbanken. Beispiele hierfür sind die Deutsche Diachrone Baumbank und die Mercurius-Baumbank, die ebenfalls über die oben verlinkte Berliner ANNIS-Instanz zugänglich sind. Im Folgenden konzentrieren wir uns jedoch auf sehr einfache Suchanfragen auf Tokenebene. AQL funktioniert, wie die meisten anderen Suchanfragesprachen, nach dem Prinzip, dass man nach Variable-Wert-Paaren sucht, z.B. pos=&quot;NN&quot;, wenn man nach Substantiven (genauer: Appellativen) suchen möchte. (Das verwendete Tagset für Wortarten ist das Stuttgart-Tübingen-Tagset, kurz STTS, das hier dokumentiert ist). Bei komplexeren Suchanfragen muss man die einzelnen Variable-Wert-Paare quasi miteinander verketten, d.h. man muss angeben, in welcher Relation sie zueinander stehen. Beispielsweise bedeutet pos=&quot;ART&quot; . pos=&quot;NN&quot;, dass wir einen Artikel suchen, gefolgt von einem Substantiv - denn der Punkt dient in AQL als Indikator für “direkte Präzedenz”. Alternativ kann man diese Suchanfrage auch wie folgt schreiben: pos=&quot;ART&quot; &amp; pos=&quot;NN&quot; &amp; #1 . #2 In dieser ausführlichen Schreibweise spezifizieren wir zunächst die einzelnen Variable-Wert-Paare und nehmen dann durch Zahlen auf sie Bezug. Die Anfrage ist wie folgt zu lesen: Wir suchen einen Artikel (#1), und wir suchen ein Substantiv (#2). In welchem Verhältnis stehen sie zueinander? #1 geht #2 unmittelbar voran. Die Suchanfrage bringt genau das gleiche Ergebnis wie die kurze Variante weiter oben. Diese ausführliche Schreibweise hat jedoch gerade bei komplexeren Suchanfragen den Vorteil, dass man leichter den Überblick behält und ggf. noch fehlende Elemente in der Suchanfrage entdeckt. Aufgabe: Finden Sie über die AQL-Dokumentation heraus, wie wir die Suchanfrage modifizieren müssen, um zu erlauben, dass a) bis zu 3 Wörter zwischen dem Artikel und dem Substantiv stehen, b) mindestens 1 Wort und maximal 5 Wörter zwischen dem Artikel und dem Substantiv stehen, c) beliebig viele (bzw. bis zu 50) Wörter zwischen dem Artikel und dem Subsnativ stehen. Soweit der kurze “Primer” zur Suchanfragesprache - wie bereits angekündigt, bleiben wir hier sehr an der Oberfläche. Für die vertiefte Beschäftigung mit der Anfragesprache empfehle ich die Dokumentation und die auf Seite 1 verlinkten Tutorials. Nun wollen wir uns dem versprochenen konkreten Beispiel zuwenden. Hier soll es darum gehen, Diminutive, also Verkleinerungsformen, zu finden. 2.3 Beispiel: Diminutive in RIDGES Dafür müssen wir zunächst in der Korpusauswahlspalte links unten das richtige Korpus finden. Wir verwenden das Korpus RIDGES_Herbology_Version9.0 (da RIDGES regelmäßig aktualisiert wird, gibt es allerdings möglicherweise schon eine neuere Version, wenn Sie dieses Tutorial lesen; evtl. funktionieren dann die im Folgenden angegebenen Links nicht mehr, die Suchanfragen sollten aber trotzdem noch funktionieren). Eine sehr einfache Suchanfrage auf Lemmaebene könnte nun lauten: lemma=/.*chen|.*lein/. Diese Suchanfrage verwendet reguläre Ausdrücke. Um in ANNIS regulare Ausdrücke zu verwenden, muss man die Anfrage in Slashes (/…/) einschließen statt, wie in den Beispielen oben, in Anführungszeichen. Einen Einstieg in reguläre Ausdrücke bietet die sehr empfehlenswerte Seite https://www.regular-expressions.info/. Außerdem gebe ich in diesem Tutorial sowie im folgenden Video, das ich 2020 für einen Korpuslinguistik-Online-Kurs erstellt habe, einen ausführlichen Überblick über reguläre Ausdrücke. Um das Video zu sehen, klicken Sie wieder den entsprechenden Abschnitt auf: klick mich Schauen wir uns nun die mit unserer Suchanfrage erzielten Treffer genauer an. Unschwer ist zu erkennen, dass es sehr viele Fehltreffer gibt: Beispielsweise werden machen und allein gefunden. Daher verfeinern wir die Suchanfrage etwas, indem wir nur nach spezifizieren, dass wir nur nach Substantiven suchen. Da prinzipiell auch Eigennamen (“NE”) diminuiert werden können, suchen wir nach der Wortart /N./, wobei der Punkt bei regulären Ausdrücken für “irgendein Zeichen” steht. Auf diese Weise suchen wir sowohl nach Eigennamen (“NE”) als auch nach Appellativen (“NN”). lemma=/.*chen|.*lein/ &amp; pos=/N./ &amp; #1 _=_ #2 Mit dem “=”-Operator geben wir an, dass sich beide Variable-Wert-Paare auf die gleiche Spanne (d.h. in unserem Fall: auf das gleiche Token) beziehen. Wir suchen also nach solchen Tokens, die auf der Lemma-Ebene mit “chen” oder “lein” enden und auf der POS-Ebene mit N plus einem weiteren Zeichen annotiert sind, also als Substantive getaggt sind. Mit 1677 Treffern sind die Ergebnisse nun schon etwas stärker ausgedünnt. Um zu überprüfen, ob sich dennoch (womöglich tokenfrequente) Fehltreffer eingeschlichen haben, lohnt es sich, einen Blick auf die Frequenzliste der Treffer zu werfen. Dafür klicken wir auf More &gt; Frequency Analysis, wie in 2.2 gezeigt. Defaultmäßig will ANNIS nun nach Lemma und POS auszählen, weil das die Annotationsebenen sind, auf denen wir gesucht haben. Da wir aber nur nach Lemma auszählen möchten, entfernen wir zunächst POS und initiieren dann die Frequenzanalyse, ebenfalls wie in @ref(fig:freq_analysis) gezeigt. Fig. 2.2: Frequenzanalyse initiieren Wir sehen nun eine Liste der häufigsten Lemmas, die ich hier noch einmal angebe: lemma count Blümlein 86 Blättlein 85 Blättchen 43 Quintlein 42 Männlein 37 Säcklein 34 Tüchlein 32 Kräutlein 31 Keuchen 28 Peterlein 27 Zeichen 27 Weiblein 26 Knöpflein 25 Blümchen 21 Quäntchen 20 Büchlein 18 Erbrechen 18 Bälglein 17 Zweiglein 17 Quentchen 17 Ährchen 16 Fässchen 16 Eiche|Eichen 15 Quäntlein 15 Stänglein 14 Früchtchen 14 Gertlein 14 Ästlein 13 Kochen 12 Seitenstechen 12 Stücklein 12 Mausöhrlein 12 Sämlein 11 Brechen 10 Kuchen 9 Bürdlein 9 Samentierchen 9 Zäpflein 9 Öhrchen 8 Pflänzlein 8 Zeltlein 8 Küchlein 8 Fässlein 8 Säckchen 8 Rechen 7 Täschlein 7 Gläslein 7 Bäumlein 7 Weibchen 7 Wörtlein 7 Köpflein 7 Würmlein 7 Reich|Reiche|Reichen 7 Ästchen 7 Stielchen 6 Nebenästlein 6 Kügelchen 6 Träublein 6 Becherlein 6 Stechen 6 Pontischen 6 Stäudlein 6 Blätterlein 6 Kennzeichen 6 Fisch|Fischen 6 Gamanderlein 5 Röhrlein 5 Männchen 5 Leinentüchlein 5 Kräuterbüchlein 5 Honiggrübchen 5 Kätzchen 5 Schößlein 5 Tröpflein 4 Nüsschen 4 Deckblättchen 4 Stöcklein 4 Pfaffenröhrlein 4 Samenkörnlein 4 Stengelein 4 Blumenblättchen 4 Körnlein 4 Grübchen 4 Händlein 4 Zäserlein 4 Gewerblein 4 Windröschen 4 Zünglein 4 Löchlein 4 Schließfrüchtchen 3 Lache|Lachen 3 Gipfelein 3 Bächlein 3 Bläslein 3 Näglein 3 Mutterzäpflein 3 Waldenburgischen 3 Bürstlein 3 Kindlein 3 Äderlein 3 Maiblümlein 3 Keimbläschen 3 Corsischen 3 Blütenköpfchen 3 Kölblein 3 Hülslein 3 Köpfchen 3 Grüblein 3 Schifflein 3 Blatthäutchen 3 Würzlein 3 Häuptlein 3 Fächlein 3 Desgleichen 3 Schüssellein 3 Herzgrüblein 3 Häklein 3 Härchen 3 Gartenpeterlein 3 Nägelein 3 Fäserlein 2 Sälblein 2 Seidentüchlein 2 Drache|Drachen 2 Pfännlein 2 Säulchen 2 Kräuterlein 2 Bläschen 2 Bützlein 2 Blumenknöpflein 2 Gläschen 2 Knöpfchen 2 Kränzelein 2 Teiglein 2 Teilchen 2 Krüglein 2 Gärtlein 2 Auswaschen 2 Katzenträublein 2 Käferlein 2 Paradeisgärtlein 2 Steinlein 2 Trünklein 2 Samenkeimchen 2 Nebenzinklein 2 Steinbrechen 2 Hörnlein 2 Leinensäcklein 2 Samenhäuslein 2 Würznelklein 2 Flöcklein 2 Stückchen 2 Ansuchen 2 Kardamömlein 2 Öhrlein 2 Sprösslein 2 Zinklein 2 Zipperlein 2 Stämmchen 2 Hühnlein 2 Pestilenzischen 2 Würzelein 2 Freischlein 2 Körnchen 2 Rohrbüschen 2 Nebenblättchen 2 Sieblein 2 Leistenbrüchen 2 Zirbelnüsslein 2 Hüttlein 2 Pflänzchen 2 Nebenzweiglein 2 Schwämmlein 2 Häublein 2 Häuslein 2 Würzelchen 2 Konfekttäflein 2 Stabwurz-Männlein 2 Magsaatköpflein 2 Knochen 2 Nelklein 2 Schälchen 2 Weiche|Weichen 2 Scheiblein 2 Kätzlein 2 Brüstlein 2 Beetlein 2 Faserchen 2 Priestleyischen 2 Zitterschen 2 Podagrämischen 1 Letschen 1 Blutäderlein 1 Pollenschläuchen 1 Jenaischen 1 Erlenbüschen 1 Hausgärtlein 1 Nebenschößlein 1 Retortchen 1 Hödlein 1 Monatrettichen 1 Dölderlein 1 Eichenfässlein 1 Pfündlein 1 Zwitterblümchen 1 Rachen 1 Balglein 1 Kränzlein 1 Nachforschen 1 Heschen 1 Einweichen 1 Gewürznelklein 1 Hütchen 1 verrauchen 1 Schüppchen 1 Knöchlein 1 Säumlein 1 Weinbeerlein 1 Imgleichen 1 Sieche|Siechen 1 Bäuchlein 1 Saurachbeerlein 1 Heumachen 1 Röslein 1 Bündlein 1 Judenkirschen 1 Eichstättischen 1 Engländischen 1 Podagrischen 1 Rüblein 1 Rüdlein 1 Schröpfhörnlein 1 Rütlein 1 Krönchen 1 Krönlein 1 Kirmsgästchen 1 Zweieimerfässchen 1 Büchschen 1 Ziegelstücklein 1 Luftröhrlein 1 orientischen 1 Gleichlein 1 Rietlein 1 Gewürznäglein 1 Rosenkuchen 1 Nebenäderlein 1 Feldseuchen 1 Zuckergläschen 1 Töpflein 1 Knäblein 1 Kalendermachen 1 Mäuseöhrlein 1 Leibesgebrechen 1 Waldeckischen 1 Johannisbeerlein 1 Maßliebchen 1 Porselein 1 Ringlein 1 Kamillenkräutlein 1 Pimpernüsslein 1 Butterbletschen 1 Steinchen 1 Äpfelchen 1 Kleeblättlein 1 Ripplein 1 Vorwitzchen 1 Tüpfelein 1 Traktätlein 1 Windlein 1 Saftblättchen 1 Dergleichen 1 Seitenblättchen 1 Sprößlein 1 Kornnägelein 1 Krautkuchen 1 Garkochen 1 Zimtröhrlein 1 Meeträublein 1 Sternlein 1 Granatenbäumlein 1 Glaichen 1 Töchterlein 1 Fabesbletschen 1 Goldwürmlein 1 Neglein 1 Messerspitzlein 1 Träubchen 1 Knödlein 1 Knötlein 1 Drachen 1 Majoranstöcklein 1 Tiegelein 1 Margen-Frauen-Himmel-Röslein 1 Trunklein 1 Samenhäuschen 1 Verbrechen 1 Infusionstierchen 1 Martialischen 1 Räuchlein 1 Reislein 1 Blümelein 1 Linzeichen 1 Mönchsköpflein 1 Sterbestündlein 1 Spreublättchen 1 Stübichen 1 Oberhäutchen 1 Steinpeterlein 1 Zypressennüsslein 1 Täflein 1 Ehrenpreisweiblein 1 Gränchen 1 Samenfächlein 1 Fittichen 1 Knüpflein 1 Flecklein 1 Schwertlein 1 Tertianischen 1 Essenkochen 1 Tüpflein 1 Büschlein 1 Haarlein 1 Eierkuchen 1 Nebenwürzlein 1 Maiblümchen 1 Städtlein 1 Leberlein 1 Blackwellischen 1 Werklein 1 Unkochen 1 äusländischen 1 Korianderblättlein 1 Hühnerdarmblättchen 1 Aehrchen 1 Laxiersäcklein 1 Wacholdersträuchen 1 Endblättchen 1 Zierlichen 1 Blumensträußlein 1 Schlaffkräutlein 1 Seitenwürzelchen 1 Zipflein 1 Alpenröschen 1 Werschlabeschen 1 Feinchen 1 Tridentiarischen 1 Dampfzäpflein 1 Stämmlein 1 Spitzlein 1 Gartensachen 1 Hüllblättchen 1 Strichlein 1 Keimchen 1 Hülschen 1 Erbsenbrühlein 1 Waldhähnchen 1 Brühlein 1 Käslein 1 Stuhlzäpflein 1 Dinglein 1 Einmachen 1 Verrauchen 1 Saftblätchen 1 Pünktlein 1 Weiberchen 1 Fesselein 1 Kerblein 1 Mägdelein 1 Wermutknöpfchen 1 Wermutknöpflein 1 Strohhelmlein 1 Wiedröslein 1 Büchenholzaschen 1 Messerlein 1 Samanderlein 1 Schnittlein 1 Mützlein 1 Ehrenpreismännlein 1 Berlinischen 1 Wundkräutlein 1 Leberäderlein 1 Großnäglein 1 Häufchen 1 Groschen 1 ɡleichen 1 Kelchläppchen 1 Mutterregelein 1 Rüttlein 1 Nägelblümlein 1 Küniglein 1 Brettlein 1 Johannisträublein 1 Pflästerlein 1 Zuckerwürzlein 1 Wännlein 1 Wermutsknöpfchen 1 Schildchen 1 Wässerlein 1 Zuckerküchlein 1 Küglein 1 Badstüblein 1 Waldglöcklein 1 Rosmarinstöcklein 1 Goldblättlein 1 Fingerlein 1 Megalensischen 1 Wetterröslein 1 Nervensiechen 1 Trichterlein 1 Bindlein 1 Ihresgleichen 1 Püplein 1 Benehmungsteilchen 1 Erstlichen 1 Büttelein 1 Hasenfüßlein 1 monoecischen 1 Päcklein 1 Bisslein 1 Nelkenblümlein 1 Farrnkrautmännchen 1 Blumblättchen 1 Zehenlein 1 Kämmlein 1 Labaschen 1 Äuglein 1 Kännlein 1 Laugenschäfflein 1 Fläschchen 1 Nestlein 1 Neuhochdeutschen 1 Herzstechen 1 Schliessfrüchtchen 1 Beerlein 1 Schösslein 1 Straussfederlein 1 Sträuchlein 1 Schötelein 1 Purgirlein 1 Schöttlein 1 Kreuzchen 1 Träctätlein 1 Kinderlein 1 Schweißlöchlein 1 Waldbächen 1 gelblättchen 1 Großäderlein 1 Schönchen 1 Schötlein 1 Feuerlein 1 Lavendelblümlein 1 Häflein 1 Kelchlein 1 Härlein 1 Engelein 1 Amylum-Kügelchen 1 Herzpochen 1 Ochsenzungenblümlein 1 Gesträuchen 1 Aachen 1 Glöckchen 1 Glöcklein 1 Kindelein 1 Gartennäglein 1 Atemgebrechen 1 Strünkchen 1 Centaurblümlein 1 Rebenzinklein 1 Schlafbettlein 1 Eichen 1 Rädchen 1 Därmlein 1 Kröseäderlein 1 Es zeigt sich, dass noch immer einige Fehltreffer zu verzeichnen sind, z.B. keuchen, erbrechen, Eiche bzw. Eichen und Zeichen. Bei den weniger frequenten finden sich sicherlich noch einige Fehltreffer mehr, aber wir wollen zunächst einmal einfach die genannten, relativ tokenfrequenten Fehltreffer ausschließen, um auf diesem Weg möglichst viele Fehltreffer auf einmal loszuwerden - alle weiteren können wir bei Bedarf später noch aussortieren. Wir modifizieren die Suchanfrage daher wie folgt: lemma=/.*chen|.*lein/ &amp; pos=/N./ &amp; lemma!=/Keuchen|Erbrechen|Eichen?|Zeichen/ &amp; #1 _=_ #2 &amp; #2 _=_ #3 Mit dem Ungleich-Operator != geben wir an, dass das Lemma keinem der Strings entsprechen soll, die innerhalb der Slashes /…/ mit dem ODER-Operator | voneinander abgetrennt sind. Nun haben wir die Trefferzahl einigermaßen eingegrenzt und können zum Export übergehen. "],
["export.html", "3 Export 3.1 Export mit CSV- und Grid-Exporter 3.2 Keyword hervorheben mit einem Excel-Makro", " 3 Export Obwohl ANNIS eine ganze Reihe von Exportern bietet, ist der Export von Konkordanzen einer der problematischsten Aspekte bei diesem Tool. Das liegt daran, dass ANNIS tatsächlich eher als Such- und Visualisierungstool gedacht ist. Dahinter steht der Gedanke, dass Annotationen jeglicher Art im Idealfall am besten über spezifische Annotationstools im Korpus selbst vorgenommen werden sollten. De facto ist es aber so, dass es gerade in der Lehre und oft auch bei kleineren Fallstudien in der Forschung praktikabler ist, mit sog. Konkordanzen zu arbeiten, also mit Belegsammlungen, die das jeweilige Keyword im Kontext anzeigen. Deshalb spricht man hier auch von KWIC-Konkordanzen (für “Key Word In Context”). In der aktuellen Version von ANNIS gibt es mit dem TextColumnExporter einen Exporter, der genau solche KWIC-Konkordanzen exportiert. Er hat jedoch drei Nachteile: Er exportiert Metadaten (wie Dokument, Jahr usw.) nicht bzw. nur sehr unzuverlässig. Er funktioniert - ganz vereinfacht gesagt - nur, wenn eine ganz bestimmte (Default-)Ebene genutzt wird, die aber bei manchen Korpora bewusst leer gelassen wird. Das ist bspw. beim Referenzkorpus Mittelhochdeutsch der Fall, aber offenbar auch bei RIDGES: Wenn wir versuchen, die Belege mit Hilfe dieses Exporters zu exportieren, erhalten wir eine leere Liste. Da er erst in neueren Versionen von ANNIS hinzugekommen ist, ist er bei einigen ANNIS-Instanzen, die sich noch auf ältere Versionen stützen, (noch) nicht verfügbar. So gibt es in der Bochumer ANNIS-Instanz, über die das Referenzkorpus Mittelhochdeutsch verfügbar ist, noch keinen TextColumnExporter. Der zweite Nachteil gilt übrigens auch für eine Reihe anderer Exporter, etwa den SimpleTextExporter, der bei RIDGES ebenfalls nur eine leere Liste generiert. Wenn wir dennoch eine KWIC-Konkordanz mit zusätzlichen Metadaten exportieren möchten, müssen wir uns daher mit einem Trick behelfen: Wir kombinieren einfach den Output von zwei Exportern, und zwar dem CSV-Exporter, der nur das Keyword mit seinen jeweiligen Annotationen exportiert und über den man auch relativ zuverlässig Metadaten exportieren kann; dem Grid-Exporter, der auch den Kontext mit ausgibt, bei dem aber nicht ohne weiteres zu erkennen ist, welches Wort das Keyword ist. Auch die Metadaten kann man hier mit ausgeben lassen, aber es ist einfacher, sie über den CSV-Exporter zu exportieren. 3.1 Export mit CSV- und Grid-Exporter Den CSV-Exporter konfigurieren wir so, dass zusätzlich zum Keyword und seinen Annotationen noch die Metadaten für Dokument, Autor/in, Titel, Ort und Zeit (date) angegeben werden. Dafür tragen wir metakeys=doc,author,title,place,date ins parameters-Feld ein, wie in 3.1 dargestellt. Fig. 3.1: CSV-Exporter in ANNIS Wir erhalten nun ein Textdokument, das wir in einem Texteditor wie Notepad++ (Windows) oder BBEdit (Mac) öffnen und in eine Excel- oder Calc-Tabelle copy&amp;pasten können. In den meisten Fällen klappt das reibungslos, ohne dass wir über den Textimport-Assistenten nachjustieren müssen; falls der Import doch nicht einwandfrei klappt, können wir uns grundsätzlich an den in diesem Tutorial gegebenen Anleitungen orientieren, nur dass wir es in diesem Fall nicht mit einer komma-, sondern mit einer tabseparierten Datei zu tun haben und das im Textimport-Assistenten entsprechend angeben müssen. 3.2 zeigt, wie man die passenden Einstellungen im Textimport-Assistenten vornimmt. Fig. 3.2: CSV-Export in Excel kopieren Nun haben wir also eine Tabelle, die das Keyword, seine Annotationen und die Metadaten enthält, aber noch keinen Kontext. Der Kontext ist aber in vielen Fällen sehr wichtig - gerade, wenn wir die Konkordanz mit zusätzlichen, manuellen Annotationen ergänzen wollen. Beispielsweise könnte es bei der Untersuchung von Diminutiven spannend sein, zu schauen, was genau diminuiert wird - Bezeichnungen für Menschen, Tiere, Objekte? Und hier brauchen wir den Kontext, um zu sehen, ob bspw. Weibchen sich auf ein weibliches Tier oder auf eine Frau bezieht. Im Gegenwartsdeutschen wäre die letztere Lesart zwar nicht mehr wirklich denkbar, aber gerade bei historischen Daten kann man sich oft nicht auf die muttersprachliche Intuition verlassen, weshalb der Kontext umso wichtiger ist, um verschiedene mögliche Bedeutungsvarianten zu desambiguieren. Hier kommt nun der GridExporter ins Spiel. Da wir in der gerade generierten Tabelle fast alle Informationen, die uns interessieren, schon haben, nur eben nicht den Kontext, konfigurieren wir den GridExporter so, dass er uns nur die normalisierte Transkriptionsebene (“norm”) ausgibt und sonst nichts. Dafür tragen wir, wie in 3.3 gezeigt, norm ins “Annotation Keys”-Feld ein und numbers=false ins Parameters-Feld. Letzteres verhindert, dass nach jedem Token Zahlen in eckigen Klammern angegeben werden, deren Funktion an dieser Stelle nicht allzu interessant ist. Fig. 3.3: CSV-Export in Excel kopieren Nun können wir die Daten aus dem GridExporter wiederum in einem Texteditor wie Notepad++ oder BBEdit öffnen und in die existierende Excel-Tabelle kopieren, wie in 3.4 gezeigt. Dafür müssen wir zunächst die leeren Zeilen entfernen, indem wir im Texteditor ^\\n durch nichts ersetzen. ^ ist ein regulärer Ausdruck, der für den Anfang (hier: Zeilenanfang) steht, während \\n für einen Zeilenumbruch steht. Zusammengenommen sucht dieser reguläre Ausdruck also nach Zeilen, in denen ein Zeilenumbruch direkt am Zeilenanfang steht, ergo: nach leeren Zeilen. Auch dies ist in 3.4 dargestellt. Fig. 3.4: CSV-Export in Excel kopieren Et voilà, nun haben wir uns eine (halbwegs) schöne KWIC-Tabelle gebastelt, soweit die begrenzten Exportmöglichkeiten von ANNIS dies zulassen. Gegenüber anderen KWIC-Tabellen hat das so erstellte Spreadsheet aber den Nachteil, dass das Keyword nicht in einer eigenen Spalte steht und somit nicht ohne weiteres zu erkennen ist. Auch hier können wir uns aber mit einem Trick behelfen, um es wenigstens hervorzuheben. 3.2 Keyword hervorheben mit einem Excel-Makro Eines vorab: Der folgende Trick funktioniert nur in Microsoft Excel (nicht in LibreOffice Calc) - und auch dort nur, wenn Makros aktiviert sind. Dafür brauchen Sie Administratorrechte, die Sie auf vielen Arbeitsplatz-PCs standardmäßig nicht haben. Unter Windows müssen Sie ggf. zunächst die Office-Entwicklertools aktivieren, bevor Sie mit Makros arbeiten können - mit einer schnellen Internet-Suche können Sie relativ einfach herausfinden, wie genau Sie in Ihrer Office-Version Makros aktivieren können, wenn sie noch nicht aktiviert sind. Beachten Sie bitte, dass Makros ein Sicherheitsrisiko darstellen können. Verwenden Sie daher immer nur Makros aus vertrauenswürdigen Quellen oder solche, die Sie selbst aufgezeichnet bzw. programmiert haben! Makros kann man auf unterschiedliche Art und Weise erstellen: Auf der einen Seite kann man eine Tätigkeit, die man in einem Office-Programm ausführt, “aufzeichnen”, um sie dann automatisiert immer wieder ausführen zu können. Auf der anderen Seite kann man mit Hilfe der VisualBasic-Programmiersprache (VBA) komplexere Makros programmieren. Letzteres wollen wir nun tun. (Disclaimer: Ich habe wenig Ahnung von VBA und habe Frankenstein-mäßig Codebausteine aus unterschiedlichen Quellen zusammengesetzt, z.B. von hier. Aber hey, es funktioniert!) Um ein Makro zu erstellen, das die in der Lemma-Spalte angegebenen Strings in der KWIC-Spalte erkennt und hervorhebt, copy&amp;pasten Sie einfach den folgenden Code in das VBA-Makro-Fenster und führen Sie das Makro aus. Sub highlightwords() Dim rCell As Range Dim lPos As Long, lComp As Long, lLngth As Long Dim sCell As String Dim sTxt As String Const bCase As Boolean = False &#39;&lt;- True, wenn Groß- und Kleinschreibung beachtet werden soll &#39;Anzahl der Zeilen bestimmen - es ist egal, welche Spalte wir hier nehmen, &#39;solange sie nicht leer ist. k = Cells(Rows.Count, &quot;O&quot;).End(xlUp).Row Application.ScreenUpdating = False lComp = 1 + bCase Columns(&quot;C&quot;).Font.ColorIndex = 1 For Counter = 1 To k &#39;Wenn das Keyword bei Ihnen in einer anderen Spalte als der dritten steht, &#39;dann setzten Sie bitte hier die passende Zahl ein: Set curCell1 = Worksheets(&quot;Sheet1&quot;).Cells(Counter, 3) &#39;Wenn der KWIC-Text bei Ihnen in einer anderen Spalte als der fünfzehnten steht, &#39;dann setzten Sie bitte hier die passende Zahl ein: Set curCell2 = Worksheets(&quot;Sheet1&quot;).Cells(Counter, 15) sTxt = curCell1.Value lLngth = Len(sTxt) With curCell2 .Font.ColorIndex = 1 sCell = .Text lPos = InStr(1, sCell, sTxt, lComp) Do Until lPos = 0 .Characters(lPos, lLngth).Font.ColorIndex = 5 lPos = InStr(lPos + lLngth, sCell, sTxt, lComp) Loop End With Next Counter Application.ScreenUpdating = True End Sub Das Makro sucht Strings aus einer Spalte (hier: der dritten) in einer anderen Spalte (hier: der fünfzehnten) und hebt sie dort hervor. Natürlich können Sie das Makro so anpassen, dass auch andere Spalten als Quell- bzw. Zielspalten dienen und es somit flexibel für Ihre eigenen Zwecke einsetzen, auch solche, die gar nichts mit ANNIS zu tun haben. Im Idealfall sollte das genauso einfach funktionieren wie in 3.5 dargestellt. Fig. 3.5: CSV-Export in Excel kopieren Nun haben wir eine KWIC-Konkodranz, mit der wir gut weiterarbeiten können und die wir z.B. mit weiteren Annotationsspalten ergänzen können. Das alles ist natürlich nur eine Behelfsmaßnahme: Wer sich mit Programmiersprachen, regulären Ausdrücken usw. auskennt, kann weitaus bessere Ergebnisse auf anderen Wegen effizienter erzielen. Zum Beispiel kann man erfreulicherweise sehr viele der über die diversen ANNIS-Instanzen verfügbaren Korpora auch herunterladen, z.B. über das LAUDATIO-Repository, und offline mit den Tools, mit denen man sich auskennt, durchsuchen. Aber denjenigen, die nur einmalig eine kleine Studie auf Grundlage von ANNIS-Exportdateien machen möchten, habe ich hiermit hoffentlich eine halbwegs nützliche Schritt-für-Schritt-Anleitung gegeben, die sich auch ohne tiefergehende Technikkenntnisse umsetzen lässt. "]
]
